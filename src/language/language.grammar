
@tokens {
    Identifier { $[a-zA-Z_]$[a-zA-Z0-9_]* }
    Integer { $[0-9]$[0-9]* }
    String { '"' (!["\\] | "\\" _)* '"' }
    BoolLiteral { "true" | "false" }
    LineComment { "//" ![\n]* }
    whitespace { @whitespace+ }
    CompareOp { "==" | "!="| ">"| ">="| "<" | "<=" }

    "[" "]" "{" "}" "(" ")"
    ";" ":" "::" ","
    "=" "=>"

    @precedence { LineComment, "/", BoolLiteral, Identifier }
}

kw<term> { @specialize[@name={term}]<Identifier, term> }

@skip { whitespace | LineComment }

@top module {
    FunctionsOrTypes Expr
    | FunctionsOrTypes
    | Expr
}

FunctionsOrTypes {
    FunctionOrTypes { FunctionOrType+ }
}

FunctionOrType {
    Function
}

Function {
    kw<'fn'> Identifier '(' StringArgsOptComma ')' '{' Expr '}'
}

Expr {
    Expr !additive ArithOp { '+' | '-' } Expr
    | Expr !multiplicative ArithOp { '*' | '/' | '%'} Expr
    | !unaryMinus ArithOp { '-' } Expr
    | Expr !or LogicOp { kw<'or'> } Expr
    | Expr !and LogicOp { kw<'and'>} Expr
    | !not kw<'not'> Expr
    | Expr !compare CompareOp Expr
    | Expr !equal '=' Expr
    | IfExpression
    | MatchExpression
    | !return kw<'return'> Expr
    | !parentheses '(' Expr ')'
    | Identifier
    | Literal
    | VarDefExpression
    | !vertical '|' StringArgsOptComma !vertical '|' Expr
    | !parentheses '(' ')'
    | !parentheses '(' TupleArgs ')'
    | Expr !dot '.' Integer
    | Expr !dot '.' Identifier
    | !bracket '[' ']'
    | !bracket '[' ExprArgsOptComma ']'
    | Expr !parentheses '(' ')'
    | Expr '(' ExprArgsOptComma ')'
    | Expr !bracket '[' Expr ']'
    | !braces '{' RecordFieldsOptComma '}'
    | Expr !semicolon ';' Expr
}

IfExpression {
    !command kw<'if'> Expr '{' Expr '}' (!command kw<'else'> '{' Expr '}')?
}

MatchExpression {
    !command kw<'match'> Expr '{' MatchArgsOptComma '}'
    | !command kw<'match'> Expr '{' MatchArgs ',' kw<'_'> '=>' ExprOptComma '}'
}

VarDefExpression {
    !command kw<'let'> Identifier '=' Expr
    | !command kw<'var'> Identifier '=' Expr
}

ExprOptComma {
    Expr ','
    | Expr
}

StringArgsOptComma {
    StringArgs ','
    | StringArgs
}

StringArgs {
    StringArgs ',' Identifier
    | Identifier
    | ""
}
ExprArgsOptComma {
    ExprArgs ','
    | ExprArgs
}

ExprArgs{
    ExprArgs ',' Expr
    | Expr
}

TupleArgs {
    Expr ',' ExprArgs
    | Expr ',' ExprArgs ','
    | Expr ','
}

RecordFieldsOptComma {
    RecordFields ','
    | RecordFields
}

RecordFields {
    RecordFields ',' 'Identifier' ':' Expr
    | Identifier ':' Expr
}

MatchArgsOptComma {
    MatchArgs ','
    | MatchArgs
}

MatchArgs {
    MatchArgs ',' MatchArg
    | MatchArg
}

MatchArg {
    Pattern '=>' Expr
}

Pattern {
    Expr
}

Literal {
    Integer
    | BoolLiteral
}


@precedence {
    parentheses,
    dot @right,
    unaryMinus @right,
    multiplicative @left,
    additive @left,
    bracket,
    compare @left,
    not @right,
    and @left,
    or @left,
    vertical,
    equal @left,
    braces,
    logic @left,
    command,
    return,
    semicolon @left
}
