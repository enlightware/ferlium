use crate::{Location, LocatedError};
use crate::ast::{UstrSpan, TypeSpan, MutTypeTypeSpan, PExpr as Expr, PExprKind as ExprKind, ExprKind::*, Pattern, PatternKind as PatK, PModule as Module};
use crate::value::{Value, LiteralValue};
use crate::r#type::{Type, FnType, FnArgType};
use crate::type_like::TypeLike;
use crate::effects::EffType;
use crate::parser_helpers::*;
use crate::std::{logic::bool_type, math::{int_type, float_type}, array::array_type, string::string_type};
use crate::containers::{b as boxed};
use crate::mutability::{MutVal, MutType};

use ustr::{Ustr, ustr};

use lalrpop_util::ErrorRecovery;

grammar<'err>(errors: &'err mut Vec<ErrorRecovery<usize, Token<'input>, LocatedError>>);

extern {
    type Error = LocatedError;
}

pub ModuleAndExpr: (Module, Option<Expr>) = {
    <m:Module> <e:Es<ExtraExpr>?> => (m, e),
}

ExtraExpr: ExprKind = {
    <e:Stmts> <r:Expr> => Block(ext_b(e, r)),
}

pub Module: Module = {
    FunctionOrType* => {
        <>.into_iter().fold(Module::default(), |a, m| a.merge(m))
    }
}

FunctionOrType = {
    Function
}

Function: Module = {
    <doc:DOC_COMMENT?> <l:@L> "fn" <name:Sp<UIdentifier>> <al:@L> "(" <args:StrWithOptTypeArgs> ")" <ret:FnRet<"P">?> <ar:@R> <body:Es<Block>> <r:@R> =>
        Module::new_with_function(name, args, span(al, ar), ret, body, span(l, r), parse_doc_comments(doc)),
}


// Type

pub ConcreteType: Type = {
    Type<"">
}

pub GenericType: Type = {
    Type<"P">
}

Type<P>: Type = {
    PlaceholderType if P != "",
    PrimitiveType,
    ArrayType<P>,
    RecordType<P>,
    VariantType<P>,
    TupleOrFnType<P>,
}

TupleOrFnType<P>: Type = {
    "(" ")" => Type::unit(),
    "(" ")" <ret:FnRet<P>> => Type::function_type(FnType::new(vec![], ret.0, EffType::empty())),
    "(" <l:@L> <arg:ArgType<P>> <r:@R> ")" <ret:FnRet<P>?> =>?
        Ok(if let Some(ret) = ret {
            Type::function_type(FnType::new(vec![arg], ret.0, EffType::empty()))
        } else if arg.mut_ty != MutType::constant() {
            return error("types outside function arguments cannot be &mut".into(), span(l, r));
        } else {
            arg.ty
        }),
    "(" <l:@L> <arg0:ArgType<P>> "," <args:Sep<ArgType<P>, ",">>  <r:@R> ")" <ret:FnRet<P>?> =>?
    {
        let args = ext_f(arg0, args);
        Ok(if let Some(ret) = ret {
            Type::function_type(FnType::new(args, ret.0, EffType::empty()))
        } else if args.iter().any(|a| a.mut_ty != MutType::constant()) {
            return error("types outside function arguments cannot be &mut".into(), span(l, r));
        } else {
            Type::tuple(args.into_iter().map(|a| a.ty).collect())
        })
    }
}

#[inline]
FnRet<P>: TypeSpan = {
    "->" <ret:Sp<Type<P>>> => ret,
}

ArgType<P>: FnArgType = {
    "&" "mut" <t:Type<P>> => FnArgType::new(t, MutType::mutable()),
    <t:Type<P>> => FnArgType::new(t, MutType::constant()),
}

PlaceholderType: Type = {
    "_" => Type::variable_id(0),
}

PrimitiveType: Type = {
    // "(" ")" => Type::unit(),
    "bool" => bool_type(),
    "int" => int_type(),
    "float" => float_type(),
    "string" => string_type(),
}

ArrayType<P>: Type = {
    "[" <t:Type<P>> "]" => array_type(t)
}

RecordType<P>: Type = {
    "{" <f:RecordTypeField<P>> "}" => Type::record(vec![f]),
    "{" <f:RecordTypeField<P>> "," <r:Sep<RecordTypeField<P>, ",">> "}" => Type::record(ext_f(f, r)),
}

RecordTypeField<P>: (Ustr, Type) = {
    <n:UIdentifier> ":" <t:Type<P>> => (n, t),
}

VariantType<P>: Type = {
    <f:VariantTypeAlternative<P>> <r:("|" <VariantTypeAlternative<P>>)*> => Type::variant(ext_f(f, r)),
}

VariantTypeAlternative<P>: (Ustr, Type) = {
    <tag:UIdentifier> => (tag, Type::unit()),
    <tag:UIdentifier> "(" <args:Sep<Type<P>, ",">> ")" => (tag, if args.len() == 1 {
        args[0]
    } else {
        Type::tuple(args)
    }),
}

TypeAscription: TypeSpan = {
    ":" <ty:Sp<Type<"P">>> => ty,
}

RefMutTypeAscription: MutTypeTypeSpan = {
    ":" <l:@L> <ref_mut:("&" MutTyOrInfer)?> <ty:Type<"P">> <r:@R> => if let Some(mut_ty) = ref_mut {
        (mut_ty.1, ty, span(l, r))
    } else {
        (MutType::constant(), ty, span(l, r))
    },
}

MutTyOrInfer: MutType = {
    "mut" => MutType::mutable(),
    "?" => MutType::variable_id(0),
}

// Expressions

// Expressions inspired from Rust: https://doc.rust-lang.org/reference/expressions.html
// Also: https://github.com/bleibig/rust-grammar/blob/master/parser-lalr.y
// Also: https://github.com/nikomatsakis/rustypop/blob/master/src/rusty.lalrpop

// TODO: add Rust-style optional semicolons in block expressions using
// the guard macro features of lalrpop as in Niko's rustypop.

pub Expr = {
    Es<TopExpr>
}

TopExpr = {
    PipeExpr,
    AssignExpr,
    ReturnExpr,
    AbstractExpr,
}

AssignExpr: ExprKind = {
    <le:Es<PipeExpr>> <ls:@L>"=" <rs:@R> <re:Expr> => Assign(boxed(le), span(ls, rs), boxed(re)),
}

ReturnExpr: ExprKind = {
    <l:@L> "return" <r:@R> <e:Expr> =>? error("return keyword is not implemented yet".to_string(), span(l, r)),
}

AbstractExpr: ExprKind = {
    "|" <args:StrArgs> "|" <body:Expr> => Abstract(args, boxed(body)),
    "||" <body:Expr> => Abstract(vec![], boxed(body)),
}

PipeExpr: ExprKind = {
    <l:Es<PipeExpr>> "|>" <e:Es<SuffixExpr>> "(" <a:Sep<Expr, ",">> ")" => Apply(boxed(e), ext_f(l, a), false),
    LogicOrExpr
}

LogicOrExpr = BinOpLeftAssoc<LogicalOrOp, LogicAndExpr>;

LogicAndExpr = BinOpLeftAssoc<LogicalAndOp, CompExpr>;

CompExpr = BinOpLeftAssoc<CompOp, AddExpr>;

AddExpr = BinOpLeftAssoc<AddOp, MulExpr>;

MulExpr = BinOpLeftAssoc<MulOp, UnaryExpr>;

UnaryExpr = {
    SuffixExpr,
    <o:Sp<UnaryOp>> <e:Es<UnaryExpr>> => static_apply(o, vec![e]),
}

SuffixExpr = {
    AtomExpr,
    <e:Es<SuffixExpr>> "." <f:Sp<UIdentifier>> => FieldAccess(boxed(e), f),
    <e:Es<SuffixExpr>> "." <i:Sp<UIntValue>> =>? proj_or_float(e, i),
    <e:Es<SuffixExpr>> "[" <i:Expr> "]" => Index(boxed(e), boxed(i)),
    <e:Es<SuffixExpr>> "(" <a:Sep<Expr, ",">> ")" => Apply(boxed(e), a, false),
}

AtomExpr = {
    ParExpr,
    PathExpr,
    PropertyPathExpr,
    ForExpr,
    IfExpr,
    MatchExpr,
    LiteralExpr,
    FormattedString,
    TupleExpr,
    ArrayExpr,
    RecordExpr,
    Block,
    BrokenExpr,
}

ParExpr: ExprKind = {
    "(" <e:Expr> <ty:TypeAscription> ")" => TypeAscription(boxed(e), ty.0, ty.1),
    "(" <e:Expr> ")" => e.kind,
}

PathExpr: ExprKind = {
    <p:Path> => Identifier(ustr(&p)),
}

PropertyPathExpr: ExprKind = {
    <p:PropertyPath> => PropertyPath(p.0, p.1),
}

Path: String = {
    PathIdentifier<""> => <>.to_string(),
    <l:Path> "::" <r:PathIdentifier<"E">> => l + "::" + &r,
}

PathIdentifier<E>: String = {
    Identifier => <>.to_string(),
    "and" if E != "" => "and".to_string(),
    "or" if E != "" => "or".to_string(),
    "not" if E != "" => "not".to_string(),
}

ForExpr: ExprKind = {
    "for" <id:Sp<UIdentifier>> "in" <start:Expr> ".." <end:Expr> <body:Es<Block>> =>
        for_loop(id, start, end, body),
}

IfExpr: ExprKind = {
    "if" <c:Expr> <t:Es<Block>> "else" <f:Es<IfExpr>> => cond_if_else(c, t, f),
    "if" <c:Expr> <t:Es<Block>> "else" <f:Es<Block>> => cond_if_else(c, t, f),
    "if" <c:Expr> <t:Es<Block>> => cond_if(c, t),
}

MatchExpr: ExprKind = {
    "match" <e:Expr> "{" <m:Sep<MatchArg, ",">> "}" =>
        Match(boxed(e), m, None),
    "match" <e:Expr> "{" <m:(<MatchArg> ",")*> "_" "=>" <d:Expr> ","? "}" =>
        Match(boxed(e), m, Some(boxed(d))),
}

MatchArg: (Pattern, Expr) = {
    <p:Pattern> "=>" <e:Expr> => (p, e),
}

Pattern: Pattern = {
    Ps<LiteralPattern>,
    Ps<NullaryVariantPattern>,
    Ps<NAryVariantPattern>,
}

LiteralPattern: PatK = {
    Sp<LiteralValue> => PatK::Literal(<>.0.0, <>.0.1),
    // This is necessary as our IntLiteral parses only unsigned
    "-" <v:Sp<IntValue>> => PatK::Literal(literal_value(-v.0).0, int_type()),
}

NullaryVariantPattern: PatK = {
    Sp<UIdentifier> => PatK::Variant { tag: <>, vars: vec![] },
}

NAryVariantPattern: PatK = {
    <tag:Sp<UIdentifier>> "(" <vars:StrArgs> ")" => PatK::Variant { tag, vars },
}

LiteralExpr: ExprKind = {
    LiteralValue => Literal(<>.0.into_value(), <>.1),
}

LiteralValue = {
    IntLiteral,
    BoolLiteral,
    StringLiteral,
};

TupleExpr: ExprKind = {
    "(" ")" => Literal(Value::unit(), Type::unit()),
    "(" <a:TupleArgs> ")" => tuple(a),
}

// Note: we need this to make the difference between a parenthesized expression
// and a tuple with a single element
TupleArgs: Vec<Expr> = {
    <f:Expr> "," <r:Sep<Expr, ",">> => {
        let mut v = vec![f];
        v.extend(r);
        v
    },
}

ArrayExpr: ExprKind = {
    "[" <a:Sep<Expr, ",">> "]" => Array(a),
}

// Note: we need this to make the difference between an empty block
// and a record, disallowing records with no elements
RecordExpr: ExprKind = {
    "{" <f:RecordField> "}" => Record(vec![f]),
    "{" <f:RecordField> "," <r:Sep<RecordField, ",">> "}" => Record(ext_f(f, r)),
}

RecordField: (UstrSpan, Expr) = {
    <n:Sp<UIdentifier>> ":" <e:Expr> => (n, e),
}

PropertyPath: (Ustr, Ustr) = {
    "@" <p:Path> "." <f:UIdentifier> => (p.into(), f),
}

Block: ExprKind = {
    "{" <e:Stmts> <r:Expr> "}" => Block(ext_b(e, r)),
    "{" <e:Stmts> <r:Loc<"}">> => Block(ext_b(e, unit_literal_expr(r))),
}

#[inline]
Stmts = { Stmt* }

Stmt = {
    Es<LetStmt>,
    ExprStmt,
}

LetStmt: ExprKind = {
    "let" <mut_flag:"mut"?> <id:Sp<UIdentifier>> <ty:TypeAscription?> "=" <e:Expr> ";" => {
        let mut_val = if mut_flag.is_some() {
            MutVal::mutable()
        } else {
            MutVal::constant()
        };
        let (e, ty_span_and_complete) = if let Some((ty, ty_span)) = ty {
            let span = e.span;
            (
                Expr::new(TypeAscription(boxed(e), ty, ty_span), span),
                Some((ty_span, ty.is_constant()))
            )
        } else {
            (e, None)
        };
        Let(id, mut_val, boxed(e), ty_span_and_complete)
    }
}

ExprStmt: Expr = {
    <e:Expr> ";" => e,
}

// Error recovery

BrokenExpr: ExprKind = {
    ! => { errors.push(<>); Error },
}

// Common non-terminals

// String arguments with optional trailing comma
StrArgs = {
    Sep<Sp<UIdentifier>, ",">
}

StrWithOptTypeArgs = {
    Sep<StrWithOptType, ",">
}

StrWithOptType: (UstrSpan, Option<MutTypeTypeSpan>) = {
    <id:Sp<UIdentifier>> <ty:RefMutTypeAscription?> => (id, ty),
}

// Terminals

UnaryOp: Ustr = {
    "-" => ustr("std::neg"),
    "not" => ustr("std::not"),
    <l:@L> "!" <r:@R> =>? error("for readability, use the \"not\" keyword instead of the C-style ! operator".into(), span(l, r)),
}

MulOp: Ustr = {
    "*" => ustr("std::mul"),
    "/" => ustr("std::div"),
}

AddOp: Ustr = {
    "+" => ustr("std::add"),
    "-" => ustr("std::sub"),
}

CompOp: Ustr = {
    "==" => ustr("std::eq"),
    "!=" => ustr("std::ne"),
    "<=" => ustr("std::le"),
    "<" => ustr("std::lt"),
    ">=" => ustr("std::ge"),
    ">" => ustr("std::gt"),
}

LogicalAndOp: Ustr = {
    "and" => ustr("std::and"),
    <l:@L> "&&" <r:@R> =>? error("for readability, use the \"and\" keyword instead of the C-style && operator".into(), span(l, r)),
}

LogicalOrOp: Ustr = {
    "or" => ustr("std::or"),
    <l:@L> "||" <r:@R> =>? error("for readability, use the \"or\" keyword instead of the C-style || operator".into(), span(l, r)),
}

UIdentifier: Ustr = {
    Identifier => ustr(<>),
}

Identifier: &'input str = r"[\p{L}_][\p{L}\p{N}_]*" => <>;

BoolLiteral: (LiteralValue, Type) = {
    "true" => literal_value(true),
    "false" => literal_value(false),
};

IntLiteral: (LiteralValue, Type) = {
    IntValue => literal_value(<>),
};

IntValue: isize = <l:@L> <s:r"[1-9][0-9]*|0"> <r:@R> =>? match parse_num::<isize>(s) {
    Ok(value) => Ok(value),
    Err(msg) => error(msg, span(l, r)),
};

UIntValue: usize = <l:@L> <s:r"[1-9][0-9]*|0"> <r:@R> =>? match parse_num::<usize>(s) {
    Ok(value) => Ok(value),
    Err(msg) => error(msg, span(l, r)),
};

StringLiteral: (LiteralValue, Type) = r#"\"([^\\\"]|\\.)*\""# => (string_literal(<>), string_type());

FormattedString: ExprKind = r#"f\"([^\\\"]|\\.)*\""# => formatted_string(<>);

// Macros

// Build an Expr out of an ExprKind by adding its span
#[inline]
Es<K>: Expr = {
    Sp<K> => Expr::new(<>.0, <>.1),
};

// Build a Pattern out of an PatternKind by adding its span
#[inline]
Ps<T>: Pattern = {
    Sp<T> => Pattern::new(<>.0, <>.1),
};

// Return T along with its location
Sp<T>: (T, Location) = {
    <l:@L> <t: T> <r:@R> => (t, span(l, r)),
};

// Return the location of T, ignoring its content
Loc<T>: Location = {
    <l:@L> T <r:@R> => span(l, r),
};

// S-separated list of T, with optional trailing S
Sep<T, S>: Vec<T> = {
    <mut v:(<T> S)*> <e:T?> => match e {
        None => v,
        Some(e) => {
            v.push(e);
            v
        }
    }
};

// A tier of expression, for a binary operation, left-associative
BinOpLeftAssoc<Op, NextTier>: ExprKind = {
    <l:Es<BinOpLeftAssoc<Op, NextTier>>> <o:Sp<Op>> <r:Es<NextTier>> => static_apply(o, vec![l, r]),
    NextTier
};

// Skip whitespaces and comments in the lexer
match {
    r"///[^\n\r]*[\n\r]*" => DOC_COMMENT,
} else {
    r"\s*" => { }, // The default whitespace skipping is disabled if an `ignore pattern` is specified
    r"//[^\n\r]*[\n\r]*" => { }, // Skip `// comments`
    r"/\*[^*]*\*+(?:[^/*][^*]*\*+)*/" => { },  // Skip `/* comments */`
    _
}