@tokens {
    Identifier { $[a-zA-Z_]$[a-zA-Z0-9_]* }
    UInt { $[0-9]$[0-9]* }
    String { 'f'? '"' (!["\\] | "\\" _)* '"' }
    Boolean { "true" | "false" }
    LineComment[isolate] { "//" ![\n]* }
    BlockComment[isolate] { "/*" blockCommentRest }
    blockCommentRest { ![*] blockCommentRest | "*" blockCommentAfterStar }
    blockCommentAfterStar { "/" | "*" blockCommentAfterStar | ![/*] blockCommentRest }
    whitespace { @whitespace+ }
    CompareOp { "==" | "!="| ">"| ">="| "<" | "<=" }
    AssignOp { "="  }
    UpdateOp { "+=" | "-=" | "*=" | "/="  }

    "[" "]" "{" "}" "(" ")"
    ";" ":" "::" ","
    "=>" ".." "|>"

    @precedence { LineComment, BlockComment, "/" }
    @precedence { Boolean, String, Identifier }
}

@precedence {
    noStruct,
    structLiteral
}

kw<term> { @specialize[@name={term}]<Identifier, term> }

@skip { whitespace | LineComment | BlockComment }

@top ModuleAndExpr {
    Module extraExpr?
}

Module {
    modelItem*
}

modelItem {
    Function
    | TraitImpl
    | TypeDef
}

Function {
    kw<'fn'> Identifier '(' identifierWithOptTypeArgs ')' fnRet? Block
}

TraitImpl {
    kw<'impl'> Identifier '{' Function* '}'
}

TypeDef {
    StructDef
    | EnumDef
}

StructDef {
    kw<'struct'> TypeName { Identifier } TypeArgs? structBody
}

structBody {
    recordType
    | '(' (Type ',')* Type? ')'
    | ';' // empty struct
}

TypeArgs {
    '<' Identifier (',' Identifier)* '>'
}

EnumDef {
    kw<'enum'> TypeName { Identifier } TypeArgs? '{' (enumVariant ',')* enumVariant? '}'
}

enumVariant {
    TagName { Identifier }
    | TagName { Identifier } '(' (Type ',')* Type? ')'
    | TagName { Identifier } recordType
}

Type {
    placeholderType
    | Path
    | arrayType
    | recordType
    | variantType
    | tupleOrFnType
}

tupleOrFnType {
    '(' (argType ',')* argType? ')' fnRet?
}

fnRet {
    '->' Type
}

argType {
    '&' 'mut' Type
    | Type
}

placeholderType {
    TypeOp { kw<'_'> }
}

arrayType {
    '[' Type ']'
}

recordType {
    '{' (recordTypeField ',')* recordTypeField? '}'
}

recordTypeField {
    FieldName { Identifier } ':' Type
}

variantType {
    variantTypeAlternativeRestricted
    | variantTypeAlternative '|' variantTypeAlternative ('|' variantTypeAlternative)*
}

variantTypeAlternativeRestricted {
    Identifier '(' (Type ',')* Type? ')'
}

variantTypeAlternative {
    Identifier
    | Identifier '(' (Type ',')* Type? ')'
}

TypeAscription {
    TypeOp { ':' } Type
}

RefMutTypeAscription {
    TypeOp { ':' } (MutTyOrInfer)? Type
}

MutTyOrInfer {
    '&' 'mut'
    | '&' '?'
}

extraExpr {
    stmt* expr
}

expr {
    Assignment
    | Return
    | Abstraction
    | pipeExpr
}

Assignment {
    pipeExpr AssignOp expr
    | pipeExpr UpdateOp expr
}

Return {
    kw<'return'> expr
}

Abstraction {
    '|' identifiersOptComma '|' expr
    | '||' expr
}

pipeExpr {
    rangeExpr
    | pipeExpr '|>' suffixExpr '(' exprArgsOptComma ')'
}

rangeExpr {
    logicOrExpr
    | unaryExpr '..' unaryExpr
}

logicOrExpr {
    logicAndExpr
    | logicOrExpr LogicOp { kw<'or'> } logicAndExpr
    | logicOrExpr LogicOp { '||' } logicAndExpr
}

logicAndExpr {
    compExpr
    | logicAndExpr LogicOp { kw<'and'> } compExpr
    | logicAndExpr LogicOp { '&&' } compExpr
}

compExpr {
    addExpr
    | compExpr CompareOp addExpr
}

addExpr {
    mulExpr
    | addExpr ArithOp { '+' | '-' } mulExpr
}

mulExpr {
    castExpr
    | mulExpr ArithOp { '*' | '/' | '%'} castExpr
}

castExpr {
    unaryExpr
    | castExpr kw<'as'> castTargetType
}

castTargetType {
    Path
    | arrayType
    | recordType
}

unaryExpr {
    suffixExpr
    | LogicOp { kw<'not'> } unaryExpr
    | LogicOp { '!' } unaryExpr
    | ArithOp { '-' } unaryExpr
}

suffixExpr {
    atomExpr
    | Projection
    | Indexing
    | Application
}

Projection {
    suffixExpr '.' Identifier
    | suffixExpr '.' UInt
}

Indexing {
    suffixExpr '[' expr ']'
}

Application {
    suffixExpr '(' exprArgsOptComma ')'
}

atomExpr {
    parExpr
    | pathOrStructCtor
    | PropertyPath
    | For
    | If
    | Match
    | Literal
    | Tuple
    | Array
    | Record
    | Block
}

parExpr {
    '(' expr TypeAscription?')'
}

If {
    kw<'if'> expr Block kw<'else'> If
    | kw<'if'> expr Block (kw<'else'> Block)?
}

Match {
    kw<'match'> expr '{' matchArgsOptComma '}'
    | kw<'match'> expr '{' (matchArgs ',')? kw<'_'> '=>' exprOptComma '}'
}

For {
    kw<'for'> Identifier kw<'in'> expr Block
}

Tuple {
    '(' ')'
    | '(' tupleArgs ')'
}

tupleArgs {
    expr ',' exprArgsOptComma
}

Array {
    '[' exprArgsOptComma ']'
}

Record {
    '{' RecordField '}'
    | '{' RecordField ',' (RecordField ',')* RecordField? '}'
}

RecordField {
    FieldName { Identifier } ':' expr
}

exprOptComma {
    expr ','
    | expr
}

identifiersOptComma {
    (Identifier ',')* Identifier?
}

identifierWithOptTypeArgs {
    (identifierWithOptTypeArg ',')* identifierWithOptTypeArg?
}

identifierWithOptTypeArg {
    Identifier RefMutTypeAscription?
}

exprArgsOptComma {
    (expr ',')* expr?
}

matchArgsOptComma {
    matchArgs ','
    | matchArgs
}

matchArgs {
    matchArgs ',' MatchBranch
    | MatchBranch
}

MatchBranch {
    Pattern '=>' expr
}

Pattern {
    literalPattern
    | TagName { Identifier }
    | TagName { Identifier } '(' identifiersOptComma ')'
    | TagName { Identifier } '{' identifiersOptComma '}'
}

PropertyPath {
    '@' Path '.' Identifier
}

pathOrStructCtor {
    Path !noStruct
    | Path Record !structLiteral
    | Path '{' '}' !structLiteral
}

Path {
    (Identifier '::')* Identifier
}

literalPattern {
    scalarLiteralPattern
    | tupleLiteralPattern
}

scalarLiteralPattern {
    Literal
    | '-' UInt
}

tupleLiteralPattern {
    '(' literalPattern (',' literalPattern)* ')'
}

Literal {
    UInt
    | String
    | Boolean
}

Block {
    "{" stmt* expr "}"
    | "{" stmt* "}"
}

stmt {
    Let
    | exprStmt
}

Let {
    kw<'let'> kw<'mut'>? Identifier TypeAscription? '=' expr ';'
}

exprStmt {
    expr ';'
}